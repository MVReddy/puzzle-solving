<!DOCTYPE HTML><html lang="en"><head><meta charset="UTF-8"/>
</head><body>
<div class="container">
<h1>Sudoku</h1>
<p>Learning cases</p>
<ul>
<li>Use String comparison in order to optimize execution time</li>
<li>When code has to follow Math expressions, scripting languages are the best to describe</li>
</ul>
<p>1. Rotate:</p>
<p>
<span>1.1</span> original: <code>compare(rowstoday, rowslast)</code><br/>
<span>1.2</span> clockwise 1: <code>compare(columnstoday, columnslast_reversed)</code><br/>
<span>1.3</span> clockwise 2: <code>compare(rowstoday, rowslast_reversed)</code><br/>
<span>1.4</span> clockwise 3: <code>compare(columnstoday, columnslast)</code>
</p>
<pre class="prettyprint linenums" id="snippet-rotate"></pre>
<p>2. Columns in segment (total=252 variations per column set, no repeats)<br/>
It is not clear whether one or more segments have to have 2 columns swapped. <br/>
Not said which columns to swap, then it will be 3 variations + original within one segment.<br/></p>
<p><span>2.1</span> clockwise 1: <code>swapindexes(columnslast, function(a) { return compare(a, columnstoday); })</code><br/>
</p>
<p>What about columns being rotated?<br/>
<span>2.2</span> clockwise 3: <code>swapindexes(columnslast_reversed, function(a) { return compare(a, columnstoday); })</code>
</p>
<p>3. Rows in segment (total=252 variations per rows set, no repeats)<br/>
It is not clear whether one or more segments have to have 2 rows swapped. <br/>
Not said which rows to swap, then it will be 3 variations + original within one segment.</p>
<p><span>3.1</span> original: <code>swapindexes(rowslast, function(a) { return compare(a, rowstoday); })</code></p>
<p>What about columns being rotated?<br/>
<span>3.2</span> clockwise 2: <code>swapindexes(rowslast_reversed, function(a) { return compare(a, rowstoday); })</code>
</p>
<pre class="prettyprint linenums" id="snippet-swaps"></pre>
<p>4. row or column 6x2=12</p>
<p><span>4.1</span> original, row segment <code>compareSet(rowstoday, rowslast)</code><br/>
<span>4.2</span> clockwise 3, column segment <code>compareSet(columnstoday, columnslast)</code></p>
<pre class="prettyprint linenums" id="snippet-swap-segments"></pre>
</p>
<p>5. ?- unclear </p>
<p>Also code is here: <a href="/sudoku.py" class="btn">Python sudoku.py</a></p>
<p>Check full source code in <a href="https://github.com/slavkur/puzzle-solving">github</a></p>
</div>
<link href="http://getbootstrap.com/2.3.2/assets/css/bootstrap.css" rel="stylesheet" media="screen"/>
<link href="http://getbootstrap.com/2.3.2/assets/css/bootstrap-responsive.css" rel="stylesheet" media="screen"/>
<link href="http://getbootstrap.com/2.3.2/assets/js/google-code-prettify/prettify.css" rel="stylesheet" media="screen"/>
<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>
<script type="text/javascript" src="http://getbootstrap.com/2.3.2/assets/js/google-code-prettify/prettify.js"></script>
<style>
code + span {
  font-weight: bold;
}
code + span:before {
  content: ': ';
}
</style>
<script type="text/javascript" id="rotate">
// the static rule of Sudoku number length
var length = 9;
// input includes 9x2 length
// so we have last week and this week results
var rows = ["963174258", "178325649", "254689731", "821437596", "496852317", "735961824", "589713462", "317246985", "642598173", "060104050", "200000001", "008305600", "800407006", "006000300", "700901004", "500000002", "040508070", "007206900"];
// slice rows for last week results
var rowslast = rows.slice(0, length)
// slice rows for this week results
var rowstoday = rows.slice(length, length*2);
// for clocwise/counter clowise 2
// rows for last week results are reversed
var rowslast_reversed = [].concat(rowslast);
rowslast_reversed.reverse();

// predefine arrays for columns population
for(var i = 0, columnstoday = new Array(length), columnslast = new Array(length), columnstoday_reversed; i < rows.length / 2; i++) {
  // go trough each row and pick up a number in order of index
  for(var j = 0; j < length; j++) {
    if(columnstoday[i] == null) columnstoday[i] = '';
    columnstoday[i] += rowstoday[j][i];

    if(columnslast[i] == null) columnslast[i] = '';
    columnslast[i] += rowslast[j][i];
  }
}

// for clockwise 1, or counter clockwise 3
// columns for last week results are reversed
columnslast_reversed = [].concat(columnslast);
columnslast_reversed.reverse();

function compare(today, last) {
  return new RegExp(today.join('').replace(/0/g, '\\d')).test(last.join(''));
}

</script>
<script id="swaps">
// rowslast or columnslast
// assuming that the arrays are not equal already
// we skip the initial check and go to shuffling
function swapindexes(indexes, _compare, i) {
  // make 3 steps
  for(var i = i || 3, a; i < indexes.length + 1; i+=3) {
    // reset the array
    a = [].concat(indexes);

    for(var j = 0; j < 2; j++) {
      // swap 2nd and 3d indexes
      a = a.insert(i, a[i-2]);
      a.splice(i-2, 1);

      // check and compare variations
      if(_compare(a) == true ||
         swapindexes(a, _compare, i+3) == true)
         return true

      // swap 1st and 3d indexes
      // swap 1st and 2nd indexes
      for(var j = 0; j < 2; j++) {
        a = a.insert(i, a[i-3]);
        a.splice(i-3, 1);
        
        // check and compare variations
        if(_compare(a) == true ||
          swapindexes(a, _compare, i+3) == true)
          return true
      }
    }

    // .. variation with 
    // 1 segment swap first and second indexes
    //i=6 < 9+1 recersive(a, ii=i+3)
      // and 2 segment swap first and second indexes
      //i=9 < 9+1 recersive(a, ii=i+3)
  }

  return false;
}

// we need a helper function to manupulate the positions
Array.prototype.insert = function(index) {
  this.splice.apply(this, [index, 0].concat(
    Array.prototype.slice.call(arguments, 1)));
  return this;
};
</script>
<script id="swap-segments">
// derived and unified from earlier example
function swap(a, i, j, f) {
  a = a.concat(a.slice.apply(a, f(i, j)));
  a.splice((i-j)*i, i);
}

function compareSet(today, last) {
  // let's define a function for picking up the indexes
  var f = function(i, j) { 
    // 2 values max: start index, end index
    return [(i-j)*i, (i-j)*i+3]; 
  };
  var a = [].concat(last);
  
  for(var j = 0; j < 2; j++) {
    // swap 2nd and 3d segments
    swap(a, 3, 2, f);
    if(compare(today, a) == true) return true;

    // swap 1st and 3d segments
    // swap 1st and 2nd segments
    for(var k = 0; k < 2; k++) {
      swap(a, 3, 3, f);
      if(compare(today, a) == true) return true;
    }
  }

  return false;
}
</script>
<script id="control">
$(function() { window.prettyPrint && prettyPrint(); });
$('script[id]:not([id="control"])').each(function () {
  $('#snippet-' + $(this).attr('id')).append($(this).text());
});

$("<span></span>").text(compare(rowstoday, rowslast)).insertAfter($("span:contains('1.1')").next());

$("<span></span>").text(compare(columnstoday, columnslast_reversed)).insertAfter($("span:contains('1.2')").next());

$("<span></span>").text(compare(rowstoday, rowslast_reversed)).insertAfter($("span:contains('1.3')").next());

$("<span></span>").text(compare(columnstoday, columnslast)).insertAfter($("span:contains('1.4')").next());

$("<span></span>").text(swapindexes(columnslast, function(a) { return compare(columnstoday, a); })).insertAfter($("span:contains('2.1')").next());

$("<span></span>").text(swapindexes(columnslast_reversed, function(a) { return compare(columnstoday, a); })).insertAfter($("span:contains('2.2')").next());

$("<span></span>").text(swapindexes(rowslast, function(a) { return compare(rowstoday, a); })).insertAfter($("span:contains('3.1')").next());

$("<span></span>").text(swapindexes(rowslast_reversed, function(a) { return compare(rowstoday, a); })).insertAfter($("span:contains('3.2')").next());

$("<span></span>").text(compareSet(rowstoday, rowslast)).insertAfter($("span:contains('4.1')").next());

$("<span></span>").text(compareSet(columnstoday, columnslast)).insertAfter($("span:contains('4.2')").next());

</script>
</body></html>
